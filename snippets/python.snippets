# Methods/Classes {{{
snippet def "function definition" b
	def ${1:function}(${2}):
		$TM_SELECTED_TEXT${3}

snippet ld "lambda"
	lambda${2}: ${3}

snippet main "main method"
	if __name__ == '__main__':
		$TM_SELECTED_TEXT${1}

snippet cls "class" b
	class ${1:$TM_FILENAME_BASE}(${2}):
		$TM_SELECTED_TEXT${3}

snippet super "call parent method"
	super(${1}).${2:__init__}(${3})

snippet stat "staticmethod definition" b
	@staticmethod
	def ${1:method}(${2}):
		$TM_SELECTED_TEXT${3}

snippet prop "property definition" b
	@property
	def ${1:name}(self):
		$TM_SELECTED_TEXT${2}

snippet clmd "classmethod definition" b
	@classmethod
	def ${1:method}(cls${2}):
		$TM_SELECTED_TEXT${3}
# }}}

# Magic {{{
snippet __getattr__ "__getattr__"
	__getattr__(self, ${2:name})

snippet __get__ "__get__"
	__get__(self, ${2:instance}, ${3:owner})

snippet __set__ "__set__"
	__set__(self, ${2:instance}, ${3:value})

snippet __delete__ "__delete__"
	__delete__(self, ${2:instance})

snippet __set_name__ "__set_name__"
	__set__(self, ${2:ownwer}, ${3:name})

snippet __bytes__ "__bytes__"
	__bytes__(self)

snippet __bool__ "__bool__"
	__bool__(self)

snippet __lt__ "__lt__"
	__lt__(self, ${1:other})

snippet __le__ "__le__"
	__le__(self, ${1:other})

snippet __gt__ "__gt__"
	__gt__(self, ${1:other})

snippet __ge__ "__ge__"
	__ge__(self, ${1:other})

snippet __getitem__ "__getitem__"
	__getitem__(self, ${1:key})

snippet __setitem__ "__setitem__"
	__setitem__(self, ${1:key}, ${2:value})

snippet __delitem__ "__delitem__"
	__delitem__(self, ${1:key})

snippet __iter__ "__iter__"
	__iter__(self)

snippet __len__ "__len__"
	__len__(self)

snippet __reversed__ "__reversed__"
	__reversed__(self)

snippet __contains__ "__contains__"
	__contains__(self)

snippet __missing__ "__missing__"
	__missing__(self)

snippet __enter__ "__enter__"
	__enter__(self)

snippet __exit__ "__exit__"
	__exit__(self, ${1:exc_type}, ${2:exc_value}, ${3:traceback})

snippet __and__ "__and__"
	__and__(self, ${1:other})

snippet __or__ "__or__"
	__or__(self, ${1:other})

snippet __lshift__ "__lshift__"
	__lshift__(self, ${1:other})

snippet __rshift__ "__rshift__"
	__rshift__(self, ${1:other})

snippet __xor__ "__xor__"
	__xor__(self, ${1:other})

snippet __int__ "__int__"
	__int__(self)

snippet __hex__ "__hex__"
	__hex__(self)

snippet __float__ "__float__"
	__float__(self)

snippet __complex__ "__complex__"
	__complex__(self)

snippet __oct__ "__oct__"
	__oct__(self)

snippet __index__ "__index__"
	__index__(self)

snippet __neg__ "__neg__"
	__neg__(self)

snippet __pos__ "__pos__"
	__pos__(self)

snippet __abs__ "__abs__"
	__abs__(self)

snippet __invert__ "__invert__"
	__invert__(self)

snippet __add__ "__add__"
	__add__(self, ${1:other})

snippet __sub__ "__sub__"
	__sub__(self, ${1:other})

snippet __mul__ "__mul__"
	__mul__(self, ${1:other})

snippet __div__ "__div__"
	__div__(self, ${1:other})

snippet __floordiv__ "__floordiv__"
	__floordiv__(self, ${1:other})

snippet __truediv__ "__truediv__"
	__truediv__(self, ${1:other})

snippet __mod__ "__mod__"
	__mod__(self, ${1:other})

snippet __divmod__ "__divmod__"
	__divmod__(self, ${1:other})

snippet __matmul__ "__matmul__"
	__matmul__(self, ${1:other})

snippet __floor__ "__floor__"
	__floor__(self)

snippet __ceil__ "__ceil__"
	__ceil__(self)

snippet __trunc__ "__trunc__"
	__trunc__(self)

snippet __round__ "__round__"
	__round__(self, ${1:ndigits})

snippet __del__ "__del__"
	__del__(self)

snippet __call__ "__call__"
	__call__(self${1})

snippet __subclasscheck__ "__subclasscheck__"
	__subclasscheck__(self, ${1:subclass})

snippet __instancecheck__ "__instancecheck__"
	__instancecheck__(self, ${1:instance})

snippet __await__ "__await__"
	__await__(self)

snippet __aiter__ "__aiter__"
	__aiter__(self)

snippet __anext__ "__anext__"
	__anext__(self)

snippet __aenter__ "__aenter__"
	__aenter__(self)

snippet __aexit__ "__aexit__"
	__aexit__(self, ${1:exc_type}, ${2:exc_value}, ${3:traceback})
# }}}

# Conditions {{{
snippet if "if statement"
	if ${1:condition}:
		$TM_SELECTED_TEXT${2}

snippet ife "if ... else"
	if ${1:condition}:
		$TM_SELECTED_TEXT${2}
	else:
		${3:pass}

snippet elif "elif"
	elif ${1:condition}:
		$TM_SELECTED_TEXT${2}

snippet switch "emulated switch"
	{
		${2}
	}.get(${1:key})

snippet match "match case"
	match ${1:flag}:
		case ${2}:
			$TM_SELECTED_TEXT${3}

snippet case "case"
	case ${1:_}:
		$TM_SELECTED_TEXT${2}
# }}}

# Loops {{{
snippet for "for loop"
	for ${1:item} in ${2:iterable}:
		$TM_SELECTED_TEXT${3}

snippet forr "for (range)"
	for ${1:i} in range(${2:0}, ${3:10}):
		$TM_SELECTED_TEXT${4}

snippet wh "while loop"
	while ${1:true}:
		$TM_SELECTED_TEXT${2}
# }}}

# Exceptions {{{
snippet try "try ... except"
	try:
		$TM_SELECTED_TEXT${2}
	except ${1:Exception}:
		${3:pass}

snippet tryf "try ... except ... finally"
	try:
		$TM_SELECTED_TEXT${2}
	except ${1:Exception}:
		${3:pass}
	finally:
		${4:pass}

snippet trye "try ... except ... else"
	try:
		$TM_SELECTED_TEXT${2}
	except ${1:Exception}:
		${3:pass}
	else:
		${4:pass}

snippet tryef "try ... except ... else ... finally"
	try:
		$TM_SELECTED_TEXT${2}
	except ${1:Exception}:
		${3:pass}
	else:
		${4:pass}
	finally:
		${5:pass}
# }}}

# Django {{{
snippet djmod "Django model" b
	class ${1:ModelName}(${2:models.Model}):
		$TM_SELECTED_TEXT${3}

		def __str__(self):
			return ${4:self.name}

		class Meta:
			verbose_name = '${5:$1}'

snippet djform "Django form" b
	class ${1:FormName}(${2:forms.Form}):
		$TM_SELECTED_TEXT${3}

snippet djmf "Django model field"
	models.${1|Auto,BigAuto,BigInteger,Binary,Boolean,Char,Combo,Date,DateTime,Decimal,Duration,Email,File,FilePath,Float,Image,Integer,GenericIPAddress,ModelChoice,ModelMultipleChoice,MultiValue,NullBoolean,PositiveInteger,PositiveSmallInteger,SmallInteger,Slug,SplitDateTime,Text,Time,URL,UUID|}Field(${2})

snippet djrel "Django relationship field"
	models.${1|ForeignKey,ManytoManyField,OneToOneField|}(${2})

snippet djff "Django form field"
	forms.${1|Boolean,Char,Choice,Combo,Date,DateTime,Decimal,Email,File,FilePath,Float,Image,Integer,GenericIPAddress,ModelChoice,ModelMultipleChoice,MultipleChoice,MultiValue,NullBoolean,Regex,SplitDateTime,Slug,Time,TypedChoice,TypedMultipleChoice,URL,UUID|}Field(${2})
# }}}

# Misc {{{
snippet from "from ... import ..." b
	from ${1:os} import ${2:path}

snippet utf8 "coding: utf-8" ^
	# -*- coding: utf-8 -*-

snippet with "with ... as"
	with ${1} as ${2}:
		$TM_SELECTED_TEXT${3}

snippet open "with open(...) as"
	with open(${1:file}, '${2|r,w,rb,wb,a,x,ab,xab|}') as ${3:f}:
		$TM_SELECTED_TEXT${4}
# }}}
