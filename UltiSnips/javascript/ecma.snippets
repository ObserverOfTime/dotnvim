priority 10

global !p
from snippets import JS, capitalise
endglobal

# Import/Export {{{
snippet im "import" b
import ${2:`!p
snip.rv = JS.varname(t[1])
`} from '${1:path}';
endsnippet

snippet imc "import class" b
import ${2:`!p
snip.rv = JS.varname(capitalise(t[1]))
`} from '${1:path}';
endsnippet

snippet im. "import {...}" b
import {${2:module}} from '${1:path}';
endsnippet

snippet ex "export" b
export ${1:default }${VISUAL}${0}
endsnippet
# }}}

# Classes {{{
snippet cls "class"
class ${1:`!p snip.rv = snip.basename`} {
	${VISUAL}${0}
}
endsnippet

snippet cerr "Error class" b
class ${1:`!p snip.rv = snip.basename.rstrip('Error')
`}Error extends Error {
	constructor(message) {
		super(message);
		if(Error.captureStackTrace)
			Error.captureStackTrace(this, $1Error);
	}
	get name() { return '$1Error' }
}
endsnippet

snippet cos "constructor" b
constructor(${1}) {
	${VISUAL}${0}
}
endsnippet

snippet get "getter" b
get ${1:prop}() {
	${VISUAL}
	return ${2};
}
endsnippet

snippet geti "inline getter" b
get ${1:prop}() { return ${2:this.$1} }
endsnippet

snippet set "setter" b
set ${1:prop}(${2:$1}) {
	${VISUAL}${0}
}
endsnippet

snippet setp "Object.defineProperty setter" b
set ${1:prop}(${2:$1}) {
	${VISUAL}
	Object.defineProperty(this, '$1', {
		enumerable: ${6:false},
		configurable: ${5:true},
		writable: ${4:true},
		value: ${3}
	});
}
endsnippet
# }}}

# Object methods {{{
snippet def "Object.defineProperty" b
Object.defineProperty(${1:obj}, '${2:prop}', {
	enumerable: ${6:false},
	configurable: ${5:true},
	writable: ${4:false},
	value: ${3}
});
endsnippet

snippet defs "Object.defineProperties" b
Object.defineProperties(${1:obj}, {
	${2:prop}: prod$0
});
endsnippet

snippet prod "property definition"
{
	enumerable: ${6:false},
	configurable: ${5:true},
	writable: ${4:false},
	value: ${3}
}${0}
endsnippet

snippet ass "Object.assign" b
Object.assign(${1:obj}, {
	${VISUAL}${0}
});
endsnippet

snippet merge "merge objects" b
(...obj) => Object.assign({}, ...obj);
endsnippet

snippet empty "check if object is empty" b
(obj) => (!obj || !Object.keys(obj).length);
endsnippet

snippet omit "omit key from object" b
(obj, key) => {
	const {[key]: _, ...keys} = obj;
	return keys;
};
endsnippet

snippet isnum "check if number" b
(arg) => {
	if(typeof arg === 'number') return isFinite(arg);
	if(typeof arg === 'string' && arg.trim() !== '')
		return isFinite(Number(arg));
	return false;
}
endsnippet

snippet isobj "check if object" b
(arg) => (arg !== null && typeof arg === 'object');
endsnippet
# }}}

# Functions {{{
snippet af "arrow function"
(${1:args}) => {
	${VISUAL}${2}
}
endsnippet

snippet afi "inline arrow function"
${1:args} => ${VISUAL}${2}
endsnippet

snippet caf "const function"
const ${1:name} = (${2:args}) => {
	${VISUAL}${3}
};
endsnippet

snippet cafi "inline const function"
const ${1:name} = (${2:args}) => ${VISUAL}${3};
endsnippet

snippet fun* "generator"
function* ${1:name}(${2:args}) {
	yield ${3};
}
endsnippet
# }}}
