priority 10

global !p
from snippets import JS
endglobal

# Functions {{{
snippet iife "IIFE"
(function() {
	${VISUAL}${0}
})();
endsnippet

snippet fun "function"
function ${1:method}(${2:args}) {
	${VISUAL}${0}
}
endsnippet

snippet ferr "Error function" b
function ${1:Custom}Error(message) {
	this.name = '$1Error'
	${2:v}`!p snip.rv = JS.varmod(t[2]).lstrip(t[2])
` instance = new Error(message);
	instance.__proto__ = this;
	if(Error.captureStackTrace)
		Error.captureStackTrace(instance, $1Error);
	return instance;
}
$1Error.prototype = Object.create(Error.prototype);
$1Error.prototype.constructor = $1Error;
endsnippet

snippet proto "prototype"
${1:Class}.prototype.${2:method} = function(${3:args}) {
	${VISUAL}${0}
};
endsnippet
# }}}

# Element methods {{{
snippet .ae "addEventListener" i
.addEventListener('${2:click}', ${4:(${5}) => { ${6} }});
endsnippet

snippet .get "getElement..." i
.getElement${1/(T)|(C)|.*/(?1:s)(?2:s)/}By${1:I}`!p
`${1/(T)|(I)|(C).*/(?1:agName)(?2:d)(?3:lassName)/}(${2})
endsnippet

snippet /\.qs(a)?/ "querySelector..." ri
.querySelector`!p if match.group(1):
	snip.rv = "All"`(${2})
endsnippet
# }}}

# Modifiers {{{
snippet con "const" b
const ${1} = ${VISUAL}${2};
endsnippet

snippet let "let" b
let ${1}${2: = ${3}};
endsnippet

snippet var "var" b
var ${1}${2: = ${3}};
endsnippet
# }}}

# Conditions {{{
snippet if "if statement"
if(${1}) {
	${VISUAL}${0}
}
endsnippet

snippet ifi "inline if"
if(${1}) ${VISUAL}${2};
endsnippet

snippet ife "if ... else"
if(${1}) {
	${VISUAL}${2}
} else {
	${0}
}
endsnippet

snippet elif "else if"
else if(${1}) {
	${VISUAL}${0}
}
endsnippet

snippet switch "switch"
switch(${1}) {
	case ${2}:
		${VISUAL}${0}
		${3:break};
}
endsnippet

snippet case "case"
case ${1}:
	${VISUAL}${0}
	${2:break};
endsnippet
# }}}

# Loops {{{
snippet for "for loop" b
for(${4:l}`!p snip.rv = JS.varmod(t[4]).lstrip(t[4])
` ${1:i} = ${2:0}; $1 ${3:< 10}; ${5:++}$1) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for (in)" b
for(${3:c}`!p snip.rv = JS.varmod(t[3]).lstrip(t[3])
` ${1:i} in ${2}) {
	${VISUAL}${0}
}
endsnippet

snippet foro "for (of)" b
for(${3:c}`!p snip.rv = JS.varmod(t[3]).lstrip(t[3])
` ${1:e} of ${2}) {
	${VISUAL}${0}
}
endsnippet

snippet wh "while loop" b
while(${1:true}) {
	${VISUAL}${0}
}
endsnippet

snippet do "do ... while" b
do {
	${VISUAL}${0}
} while(${1:true});
endsnippet
# }}}

# XMLHttpRequest {{{
snippet xhr "XMLHttpRequest" b
${2:c}`!p snip.rv = JS.varmod(t[2]).lstrip(t[2])
` ${1:xhr} = new XMLHttpRequest();
endsnippet

snippet xhrf "XHR with IE fallback" b
${2:c}`!p snip.rv = JS.varmod(t[2]).lstrip(t[2])
` ${1:xhr} = window.XMLHttpRequest ?
	new window.XMLHttpRequest() :
	new window.ActiveXObject('Microsoft.XMLHTTP');
endsnippet

snippet xhro "xhr.open" b
${1:xhr}.open('${3:GET}', ${2:url}, true);
endsnippet

snippet xhrh "xhr.setRequestHeader" b
${1:xhr}.setRequestHeader('${2:X-Requested-With}', '${3:XMLHttpRequest}');
endsnippet

snippet xhrl "xhr.onload" b
${1:xhr}.onload = ${2:function() {
	if(this.status === 200) {
		${VISUAL}${3}
	}
}};
endsnippet

snippet xhre "xhr.onerror" b
${1:xhr}.onerror = ${2:function() {
	${VISUAL}${3}
}};
endsnippet

snippet xhrs "xhr.send" b
${1:xhr}.send(${2});
endsnippet
# }}}

# Errors {{{
snippet th "throw" b
throw ${1:${VISUAL:new Error()}};
endsnippet

snippet try "try ... catch" b
try {
	${VISUAL}${1}
} catch(${2:err}) {
	${3}
}
endsnippet

snippet tryf "try ... catch ... finally" b
try {
	${VISUAL}${1}
} catch(${2:err}) {
	${3}
} finally {
	${0}
}
endsnippet
# }}}

# Misc {{{
snippet us "use strict" b
'use strict';
${0}
endsnippet

snippet ret "return" b
return ${VISUAL}${1};
endsnippet

snippet . "this." b
this.
endsnippet

snippet jsonp "JSON.parse"
JSON.parse(${1:${VISUAL:text}})
endsnippet

snippet jsons "JSON.stringify"
JSON.stringify(${1:${VISUAL:json}})
endsnippet

snippet /c([ldiwetxagr])/ "console method" br
console.`!p snip.rv = JS.console(match)`(${VISUAL}${1});
endsnippet

snippet /:(,)?/ "key: value" r
${1:key}: ${2:'value'}`!p snip.rv = JS.comma(match)`${0}
endsnippet

snippet fold "vim fold" b
// ${1} {{{
${VISUAL}${0}
// }}}
endsnippet
# }}}
