priority 10

# General {{{
snippet desc "describe"
describe('${1:`!p snip.rv = snip.basename`}', () => {
	${VISUAL}${0}
});
endsnippet

snippet it "it"
it('${1}', (${1:done}) => {
	${VISUAL}${0}
});
endsnippet
# }}}

# Expect {{{
snippet ebe "expect(x).to.be(y)"
expect(${1}).to.be(${2});
endsnippet

snippet eeq "expect(x).to.equal(y)"
expect(${1}).to.equal(${2});
endsnippet

snippet eth "expect(x).to.throw(E)"
expect(${1}).to.throw(${3:Error});
endsnippet

snippet eto "expect(x).to ..."
expect(${1}).to
endsnippet
# }}}

# Assert {{{
snippet aeq "assert.equal"
assert.equal(${1}, ${2});
endsnippet

snippet ade "assert.deepEqual"
assert.deepEqual(${1}, ${2});
endsnippet

snippet ait "assert.isTrue"
assert.isTrue(${1});
endsnippet

snippet aif "assert.isFalse"
assert.isFalse(${1});
endsnippet

snippet aif "assert.isFulfilled"
assert.isFulfilled(${1:promise}, ${2:'Message'})
endsnippet

snippet air "assert.isRejected"
assert.isRejected(${1:promise}, ${2:Error}, ${3:'Message'})
endsnippet

snippet abe "assert.becomes"
assert.becomes(${1:promise}, ${2:'value'}, ${3:'Message'})
endsnippet

snippet anb "assert.doesNotBecome"
assert.doesNotBecome(${1:promise}, ${2:'value'}, ${3:'Message'})
endsnippet
# }}}

# Should {{{
snippet .sf ".should.be.fulfilled" i
.should.be.fulfilled
endsnippet

snippet .sr ".should.be.rejected" i
.should.be.rejected
endsnippet

snippet .srw ".should.be.rejectedWith" i
.should.be.rejectedWith(${1:Error}, ${2:'Message'})
endsnippet

snippet .sn ".should.notify" i
.should.notify(${1:done})
endsnippet

snippet .seq ".should.equal" i
.should.equal(${1})
endsnippet

snippet .sde ".should.deep.equal" i
.should.deep.equal(${1})
endsnippet
# }}}

# Eventually {{{
snippet .eeq "eventually equal" i
.eventually.equal(${1})
endsnippet

snippet .ede ".eventually.deep.equal" i
.eventually.deep.equal(${1})
endsnippet

snippet .ehp ".eventually.have.property" i
.eventually.have.property
endsnippet

snippet .ema ".eventually.match" i
.eventually.match(${1:regex})
endsnippet
# }}}
