priority 10

# Preprocessor {{{
snippet #in< "#include global header" b
#include <${1:stdio.h}>
endsnippet

snippet #inc "#include local header" b
#include "${1:`!v expand("%:t:r")`.h}"
endsnippet

snippet #if "#if ... #endif" b
#if ${1:0}
${VISUAL}${0}
#endif /* $1 */
endsnippet

snippet #ifd "#ifdef ... #endif" b
#ifdef ${1:SYMBOL}
${VISUAL}${0}
#endif /* ifdef $1 */
endsnippet

snippet #ifn "#ifndef ... #define ... #endif" b
#ifndef ${1:SYMBOL}
#define $1 ${2:value}
${VISUAL}${0}
#endif /* ifndef $1 */
endsnippet

snippet #def "#define" b
#define ${1:SYMBOL} ${2:value}
endsnippet
# }}}

# Functions {{{
snippet main "Main function" b
int main(int argc, char **argv) {
	${VISUAL}${0}
	return 0;
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function}(${3:params});
endsnippet

snippet func "function"
${1:void} ${2:function}(${3:params}) {
	${VISUAL}${0}
}
endsnippet

snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet
# }}}

# Loops {{{
snippet for "for loop"
for (${2:int i = 0}; ${1:i < 100}; ${3:++i}) {
	${VISUAL}${0}
}
endsnippet

snippet while "while loop"
while (${1:1}) {
	${VISUAL}${0}
}
endsnippet

snippet do "do ... while"
do {
	${VISUAL}${0}
} while (${1:1});
endsnippet
# }}}

# Conditions {{{
snippet if "if statement"
if (${1:true}) {
	${VISUAL}${0}
}
endsnippet

snippet ife "if ... else"
if (${1:true}) {
	${VISUAL}${2}
} else {
	${0}
}
endsnippet

snippet elif "else if"
else if (${1:true}) {
	${VISUAL}${0}
}
endsnippet

snippet ifi "if (single line)"
if (${1:true}) ${0};
endsnippet

snippet ter "ternary operator"
${1:true} ? ${2:a} : ${3:b}
endsnippet

snippet switch "switch statement"
switch (${1:variable}) {
	case ${2:1}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

snippet case "case statement"
case ${1:1}:
	${2}
	${3:break;}
endsnippet
# }}}

# Types {{{
snippet type "typedef"
typedef ${1:int} ${2:Type};
endsnippet

snippet struct "struct"
${3:typedef }struct ${1:`!v expand("%:t:r")`}_t {
	${0:/* data */}
}${2: `!p snip.rv = (t[1] or '').title()`;}
endsnippet

snippet enum "enum"
enum ${1:name} { ${0} };
endsnippet
# }}}

# Misc {{{
snippet exc "extern C" b
#ifdef __cplusplus
extern "C" {
#endif

${VISUAL}${0}

#ifdef __cplusplus
} /* extern "C" */
#endif
endsnippet

snippet fold "vim fold" b
// ${1:description} {{{
${VISUAL}${0}
// }}}
endsnippet
# }}}
