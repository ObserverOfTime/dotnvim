priority 10

# Shebangs {{{
snippet #! "bash shebang" b
#!/bin/bash${1: -e}

${0}
endsnippet

snippet #!s "sh shebang" b
#!/bin/sh${1: -e}

${0}
endsnippet

snippet #!e "env shebang" b
#!/usr/bin/env ${1:bash}

${0}
endsnippet
# }}}

# Conditions {{{
snippet if "if condition"
if ${1:condition}; then
	${VISUAL}${0}
fi
endsnippet

snippet ife "if ... else"
if ${1:condition}; then
	${VISUAL}${2}
else
	${3}
fi
endsnippet

snippet elif "elif"
elif ${1:condition}; then
	${VISUAL}${0}
endsnippet

snippet case "case ... esac"
case ${1:word} in
	${2:pattern})
		${VISUAL}${0}
		;;
esac
endsnippet

snippet opt "case option" b
${1:pattern})
	${VISUAL}${0}
	;;
endsnippet

snippet ter "ternary"
[${1:[} ${2:condition} ${1/.+/]/}] &&`!p
` ${3:true}${4/.+/ || /}${4:false}
endsnippet

snippet nter "numeric ternary"
((${1:var}=${2:condition}?${3:true}:${4:false}))
endsnippet

snippet /n:(eq|ne|g[te]|l[te])/ "number comparisons" r
[[ ${1:$var} -`!p snip.rv = match.group(1)` ${2:0} ]]
endsnippet
# }}}

# Loops {{{
snippet while "while loop"
while ${1::}; do
	${VISUAL}${0}
done
endsnippet

snippet until "until loop"
until ${1:condition}; do
	${VISUAL}${0}
done
endsnippet

snippet for "for loop"
for ((${1:i} = ${2:0}; $1 ${3:< 10}; ${4:++}i)); do
	${VISUAL}${0}
done
endsnippet

snippet fori "for (in)"
for ${1} in ${2}; do
	${VISUAL}${0}
done
endsnippet

snippet fort "for (tiny)" b
for((;${1:i++<10};)) { ${VISUAL}${0} }
endsnippet

snippet floop "loop over a file" b
while read -r ${2:line}; do
	${VISUAL}${0}
done < ${1:'file'}
endsnippet
# }}}

# Functions {{{
snippet fun "function definition" b
${1:name}() {
	${VISUAL}${0}
}
endsnippet

snippet verbose "verbose() function" b
verbose() {
	if (( verbosity >= ${1:\$1} )); then
		shift
		printf '%s\n' "${2:$1}"
	fi
}
endsnippet

snippet die "die() function" b
die() {
	while [ $# -gt 0 ]; do
		printf '%s\n' "\$1" >&2
		shift
	done
	exit ${1:1}
}
endsnippet
# }}}

# Misc {{{
snippet safe "set -euo pipefail" b
set -euo pipefail
endsnippet

snippet << "here document"
<<${1:EOF}
${VISUAL}${0}
${1/'//g}
endsnippet

snippet num "numeric operation"
((${VISUAL}${0}))
endsnippet

snippet regex "print matching regex part" b
[[ ${1:\$1} =~ ${2:\$2} ]] && ${3:\
	printf '%s\n' ${4:"\$\{BASH_REMATCH[1]\}"}}
endsnippet

snippet farr "read file into an array" b
IFS=$'\n' read -d '' -ra ${2:arr} < ${1:'file'}
endsnippet

snippet split "split string on delimiter" b
IFS=${4:$'\\n'} read -d '' -ra ${3:arr} <<< `!p
`"\${${1:string}//${2:d}/$4}}"
endsnippet

snippet argv "parse arguments" b
while :; do
	if [[ -z ${1+x} ]]; then break; fi
	case \$1 in
		opt${1}
		--)
			shift
			break
			;;
		-?*)
			${2:# unknown option}
			;;
		*)
			break
	esac
	shift
done
endsnippet

snippet /sc((?:\d+,?)+)/ "shellcheck disable" br
# shellcheck disable=`!p
m = match.group(1).split(",")
snip.rv = ",".join(["SC%s" % c for c in m])`
endsnippet

snippet fold "vim fold" b
# ${1:description} {{{
${VISUAL}${0}
# }}}
endsnippet
# }}}
