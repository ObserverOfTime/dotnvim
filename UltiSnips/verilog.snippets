# Conditions {{{
snippet if "if statement" b
if(${1:a}) begin
	${VISUAL}${0}
end
endsnippet

snippet ifi "inline if" b
if(${1:a}) ${VISUAL}${2};
endsnippet

snippet ife "if ... else" b
if(${1:a}) begin
	${VISUAL}${3}
end else begin
	${2}
end
endsnippet

snippet eif "else if" b
else if(${1:a}) begin
	${VISUAL}${0}
end
endsnippet

snippet el "else" b
else begin
	${VISUAL}${0}
end
endsnippet

snippet /(casez?)/ "case(z) statement" br
`!p snip.rv = match.group(1)`(${1:a})
	${2:1'b0}: ${3}
	default: ${4}
endcase
endsnippet
# }}}

# Loops {{{
snippet wh "while loop" b
while(${1:1'b1}) begin
	${VISUAL}${0}
end
endsnippet

snippet rep "repeat loop" b
repeat(${1:20}) begin
	${VISUAL}${0}
end
endsnippet

snippet for "for loop" b
for(${1:i} = ${2:0}; $1 ${3:< 10}; $1 = $1 ${4:+ 1}) begin
	${VISUAL}${0}
end
endsnippet
# }}}

# Blocks {{{
snippet mod "module" b
module ${1:Top}(${2});
${VISUAL}${0}
endmodule
endsnippet

snippet al "always" b
always begin
	${VISUAL}${0}
end
endsnippet

snippet al@ "always@(...)" b
always@(${1:a}) begin
	${VISUAL}${0}
end
endsnippet

snippet init "initial" b
initial begin
	${VISUAL}${0}
end
endsnippet
# }}}

# Misc {{{
snippet /=(-?\d*)((?i)[bdho]?)/ "assignment" br
${1:r} = `!p
snip.rv = (match.group(1) or "1") + \
	"'" + (match.group(2) or "b")
`${2:0};
endsnippet

snippet in "input" b
input wire ${1:in};
endsnippet

snippet out "output" b
output ${1:wire} ${2:out};
endsnippet

snippet r "reg" b
reg ${1:a};
endsnippet

snippet w "wire" b
wire ${1:a};
endsnippet
# }}}

