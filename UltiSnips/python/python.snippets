priority 10

global !p
from snippets import (
	Python, titlify, first_letter
)
def expand_all(snip):
	buf = vim.current.window.buffer
	exports = Python.all(buf)
	body = "__all__ = ["
	if len(exports) == 0:
		body += "${0}]"
	elif len(exports) == 1:
		body += "${1:'%s'}]" % exports[0]
	else :
		sw = " " * int(vim.eval("&sw"))
		tmpl = "${%d:%s'%s',\n}"
		body += "\n"
		for n, e in enumerate(exports, 1):
			if e[:1] == "_" and e[:2] != "__":
				continue
			body += tmpl % (n, sw, e)
		body += "]"
	snip.buffer[snip.line] = ""
	snip.expand_anon(body)
endglobal

# Import/Export {{{
snippet im "import" b
import ${1:re}
endsnippet

snippet from "from ... import ..." b
from ${1:os} import ${2:path}
endsnippet

pre_expand "expand_all(snip)"
snippet ex "__all__" b
endsnippet
# }}}

# Methods/Classes {{{
snippet def "method definition" b
def ${1:method}(`!p if snip.indent:
	s = "self, " if t[2] else "self"
	snip.rv = s`${2:arg}):
	${3:${VISUAL:pass}}${0}
endsnippet

snippet ld "lambda definition"
${1:name} = lambda${2/.+/ /}${2:args}: ${3:action}
endsnippet

snippet main "main method definition" b
if __name__ == '__main__':
	${1:${VISUAL:main()}}${0}
endsnippet

snippet cls "class" b
class ${1:`!p snip.rv = titlify(path)
`}${2/.+/(/}${2:Parent}${2/.+/)/}:
	${3:${VISUAL:pass}}${0}
endsnippet

snippet init "class __init__ definition" b
def __init__(self${1/.+/, /}${1:*args, **kwargs}):
	${VISUAL}`!p if not snip.v.text:
	snip.rv = "" if t[4] else "# (TODO)"`${4}
	${2:super(${3:`!p snip.rv = \
	titlify(path)`}, self).__init__(${5:$1})}${0}
endsnippet

snippet super "call parent method" b
super(${1:`!p snip.rv = titlify(path)
`}, self).${2:__init__}${3/.+/(/}`!p
`${3:*args, **kwargs}${3/.+/)/}
endsnippet

snippet stat "staticmethod definition" b
@staticmethod
def ${1:method}(${2:arg}):
	${3:${VISUAL:pass}}${0}
endsnippet

snippet prop "property definition" b
@property
def ${1:_name}(self):
	${2:${VISUAL:pass}}${0}
endsnippet
# }}}

# Conditions {{{
snippet if "if statement" b
if ${1:condition}:
	${2:${VISUAL:pass}}${0}
endsnippet

snippet ife "if ... else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet elif "elif" b
elif ${1:condition}:
	${2:${VISUAL:pass}}${0}
endsnippet

snippet switch "emulated switch"
{
	${3:${VISUAL:'key': 'value',}}${0}
}.get(${1:key}${2/.+/, /}${2:'default'})
endsnippet
# }}}

# Loops {{{
snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}${0}
endsnippet

snippet /for(r|x)/ "for (range)" br
for ${1:i} in `!p if match.group(1) == "x":
	snip.rv = "x"`range(${2:0}, ${3:10}):
	${3:${VISUAL:pass}}${0}
endsnippet

snippet wh "while loop" b
while ${1:true}:
	${3:${VISUAL:pass}}${0}
endsnippet
# }}}

# Errors {{{
snippet try "try ... except" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
endsnippet

snippet tryf "try ... except ... finally" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
finally:
	${0:pass}
endsnippet

snippet trye "try ... except ... else" b
try:
	${1:${VISUAL:pass}}
except ${2:Exception} as ${3:e}:
	${4:raise $3}
else:
	${0:pass}
endsnippet
# }}}

# Misc {{{
snippet /#!(2|3)?(u)?/ "python shebang" br
#!/usr/bin/env python`!p
snip.rv = match.group(1) or ""
u = '\n# -*- coding: utf-8 -*-'
if match.group(2): snip.rv += u
`
${0}
endsnippet

snippet utf8 "coding: utf-8" b
# -*- coding: utf-8 -*-
${0}
endsnippet

snippet doc "file docstring" b
"""
File: ${1:`!p snip.rv = fn`}
Author: `!v g:snips_author`
Email: `!v g:snips_email`
GitHub: `!v g:snips_github`
Description: ${0}
"""
endsnippet

snippet . "self." b
self.
endsnippet

snippet : "key: value" b
'${1:key}': ${2:'value'},
endsnippet

snippet with "with ... as"
with ${1} as ${2:`!p
snip.rv = first_letter(t[1])`}:
	${0:pass}
endsnippet

snippet open "with open(...) as"
with open(${1:'file'}, '${3:r}') as ${4:`!p
snip.rv = first_letter(t[1])`}:
	${0:pass}
endsnippet

snippet fold "vim fold" b
# ${1:description} {{{
${VISUAL}${0}
# }}}
endsnippet
# }}}
